buildscript {
    repositories {
        mavenCentral()

        maven { url = 'https://maven.parchmentmc.org' }
    }
    dependencies {
        classpath 'org.parchmentmc:librarian:1.+'
    }
}

plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle' version '[6.0.13, 6.2)'
    id 'org.spongepowered.mixin' version '0.7.+'
    id 'io.freefair.lombok' version '8.4'
}

apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'java'

tasks.named('wrapper', Wrapper).configure {
    distributionType = Wrapper.DistributionType.BIN
}

version = minecraft_version + "-" + mod_version
group = mod_group_id

base {
    archivesName = mod_id
}

sourceCompatibility = targetCompatibility = JavaVersion.VERSION_17

mixin {
    add sourceSets.main, "rarcompat.refmap.json"
    config "rarcompat.mixins.json"

    debug.verbose = true
    debug.export = true
}

minecraft {
    mappings channel: 'parchment', version: '2023.09.03-1.20.1'

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    copyIdeResources = true

    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', mod_id

            arg "-mixin.config=" + mod_id + ".mixins.json"
            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', mod_id

            arg "-mixin.config=" + mod_id + ".mixins.json"
            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

configurations {
    runtimeClasspath.extendsFrom localRuntime
}

repositories {
    mavenLocal()
    flatDir {
        dirs 'libs'
    }
    maven {
        name = "Blamejared maven"
        url = "https://maven.blamejared.com/"
    }
    maven {
        name = "ModMaven"
        url = "https://modmaven.k-4u.nl"
    }
    maven {
        name = "OctoStudios"
        url = uri("https://maven.octo-studios.com/releases")
    }
    maven { url "https://maven.architectury.dev/" }
    exclusiveContent {
        forRepository {
            maven {
                url "https://cursemaven.com"
            }
        }
        filter {
            includeGroup "curse.maven"
        }
    }
}

dependencies {
    minecraft "net.neoforged:forge:${minecraft_version}-${forge_version}"

    if (System.getProperty("idea.sync.active") != "true") {
        annotationProcessor "org.spongepowered:mixin:0.8.5:processor"
    }

    implementation 'org.jetbrains:annotations:20.1.0'

    implementation fg.deobf("it.hurts.octostudios.octolib:octolib-forge:0.4.2+1.20.1")

    implementation fg.deobf("dev.architectury:architectury-forge:9.2.14")

    runtimeOnly fg.deobf("top.theillusivec4.curios:curios-forge:5.7.0+${minecraft_version}")
    compileOnly fg.deobf("top.theillusivec4.curios:curios-forge:5.7.0+${minecraft_version}:api")

    if (file("libs").isDirectory()) {
        file("libs").eachFile { file ->
            def splitPos = file.name.lastIndexOf("-")

            if (file.name != "desktop.ini") {
                println file.name

                def modartifact = file.name.substring(0, splitPos)
                def modversion = file.name.substring(splitPos + 1, file.name.length() - 4)
                def modreference = "lib:$modartifact:$modversion"

                dependencies {
                    implementation (project.dependencies.create(modreference) {
                        transitive = false
                    })
                }
            }
        }
    } else file("libs").mkdir()
}

tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            minecraft_version      : minecraft_version,
            forge_version          : neoforge_version,
            mod_id                 : mod_id,
            mod_name               : mod_name,
            mod_version            : mod_version,
            mod_authors            : mod_authors
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/neoforge.mods.toml', 'pack.mcmeta']) {
        expand replaceProperties
    }
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : mod_id,
                "Specification-Vendor"    : mod_authors,
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : archiveVersion,
                "Implementation-Vendor"   : mod_authors,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}